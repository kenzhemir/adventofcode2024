bst 4 # B <- A & 111
bxl 5 # B <- B ^ 101
cdv 5 # C <- A >> B  (0-7)
bxl 6 # B <- B ^ 110
bxc 2 # B <- B XOR C
out 5 # O <- B & 111
adv 3 # A <- A >> 3
jnz 0 # if A != 0, jump to 0

x ^ 101
(A >> ((A & 111) ^ 101)) ^ ((A & 111) ^ 011) & 111

A = 1
O = 2
2 <- B XOR C

x01010000110000111100011011

B <- 011
B <- 110
C <- 01010000110000111100
B <- 000
B <- 01010000110000111100
O <- 100


((A & 111) ^ 011) XOR (A >> (A & 111 ^ 101))


1011000110001110

110


011 -> 001

101 ^ 001 = 100



101 ^ 110 = 011 = 3

xxxcdexx000
101 -> cde
cde ^ 011 -> c!d!e

010 ^ 011 = 001

xxxxdefg001
100 -> def
def ^ 010 -> d!ef

xabcdefg010
111 -> abc
abc ^ 001 -> ab!c

xxbcexxx011
110 -> bce
bce ^ 000 -> bce


xxxxxxxg100
001 -> g10
g10 ^ 111 -> !g01

xxxxxxxx101
101 -> 101
101 ^ 110 -> 011

xxxxxefg110
011 -> efg
efg ^ 101 -> !ef!g

xxxxxxfg111
010 -> fg1
fg1 ^ 100 -> !fg1 